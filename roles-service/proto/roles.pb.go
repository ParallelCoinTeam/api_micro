// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/roles.proto

/*
Package roles is a generated protocol buffer package.

It is generated from these files:
	proto/roles.proto

It has these top-level messages:
	Role
	Response
	ResponseRole
	RequestQuery
	ResponseList
	RoleList
*/
package roles

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Role struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	NetworkId string `protobuf:"bytes,2,opt,name=network_id,json=networkId" json:"network_id,omitempty"`
	Title     string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	RoleType  string `protobuf:"bytes,4,opt,name=role_type,json=roleType" json:"role_type,omitempty"`
	CreatedAt string `protobuf:"bytes,5,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Role) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Role) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *Role) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Role) GetRoleType() string {
	if m != nil {
		return m.RoleType
	}
	return ""
}

func (m *Role) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Role) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type Response struct {
	Result string            `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Error  map[string]string `protobuf:"bytes,2,rep,name=error" json:"error,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Data   map[string]string `protobuf:"bytes,3,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *Response) GetError() map[string]string {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type ResponseRole struct {
	Result string            `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Error  map[string]string `protobuf:"bytes,2,rep,name=error" json:"error,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Data   *Role             `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *ResponseRole) Reset()                    { *m = ResponseRole{} }
func (m *ResponseRole) String() string            { return proto.CompactTextString(m) }
func (*ResponseRole) ProtoMessage()               {}
func (*ResponseRole) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResponseRole) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *ResponseRole) GetError() map[string]string {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResponseRole) GetData() *Role {
	if m != nil {
		return m.Data
	}
	return nil
}

type RequestQuery struct {
	Offset  string `protobuf:"bytes,1,opt,name=offset" json:"offset,omitempty"`
	Limit   string `protobuf:"bytes,2,opt,name=limit" json:"limit,omitempty"`
	Orderby string `protobuf:"bytes,3,opt,name=orderby" json:"orderby,omitempty"`
	Sort    string `protobuf:"bytes,4,opt,name=sort" json:"sort,omitempty"`
}

func (m *RequestQuery) Reset()                    { *m = RequestQuery{} }
func (m *RequestQuery) String() string            { return proto.CompactTextString(m) }
func (*RequestQuery) ProtoMessage()               {}
func (*RequestQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RequestQuery) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *RequestQuery) GetLimit() string {
	if m != nil {
		return m.Limit
	}
	return ""
}

func (m *RequestQuery) GetOrderby() string {
	if m != nil {
		return m.Orderby
	}
	return ""
}

func (m *RequestQuery) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

type ResponseList struct {
	Result string            `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Error  map[string]string `protobuf:"bytes,2,rep,name=error" json:"error,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Data   *RoleList         `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *ResponseList) Reset()                    { *m = ResponseList{} }
func (m *ResponseList) String() string            { return proto.CompactTextString(m) }
func (*ResponseList) ProtoMessage()               {}
func (*ResponseList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ResponseList) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *ResponseList) GetError() map[string]string {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResponseList) GetData() *RoleList {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoleList struct {
	Offset string  `protobuf:"bytes,1,opt,name=offset" json:"offset,omitempty"`
	Limit  string  `protobuf:"bytes,2,opt,name=limit" json:"limit,omitempty"`
	Count  string  `protobuf:"bytes,3,opt,name=count" json:"count,omitempty"`
	List   []*Role `protobuf:"bytes,4,rep,name=list" json:"list,omitempty"`
}

func (m *RoleList) Reset()                    { *m = RoleList{} }
func (m *RoleList) String() string            { return proto.CompactTextString(m) }
func (*RoleList) ProtoMessage()               {}
func (*RoleList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RoleList) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *RoleList) GetLimit() string {
	if m != nil {
		return m.Limit
	}
	return ""
}

func (m *RoleList) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

func (m *RoleList) GetList() []*Role {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*Role)(nil), "roles.Role")
	proto.RegisterType((*Response)(nil), "roles.Response")
	proto.RegisterType((*ResponseRole)(nil), "roles.ResponseRole")
	proto.RegisterType((*RequestQuery)(nil), "roles.RequestQuery")
	proto.RegisterType((*ResponseList)(nil), "roles.ResponseList")
	proto.RegisterType((*RoleList)(nil), "roles.RoleList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RolesService service

type RolesServiceClient interface {
	CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Response, error)
	GetAll(ctx context.Context, in *RequestQuery, opts ...grpc.CallOption) (*ResponseList, error)
	GetRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*ResponseRole, error)
	UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Response, error)
	DeleteRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Response, error)
}

type rolesServiceClient struct {
	cc *grpc.ClientConn
}

func NewRolesServiceClient(cc *grpc.ClientConn) RolesServiceClient {
	return &rolesServiceClient{cc}
}

func (c *rolesServiceClient) CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/roles.RolesService/CreateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) GetAll(ctx context.Context, in *RequestQuery, opts ...grpc.CallOption) (*ResponseList, error) {
	out := new(ResponseList)
	err := grpc.Invoke(ctx, "/roles.RolesService/GetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) GetRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*ResponseRole, error) {
	out := new(ResponseRole)
	err := grpc.Invoke(ctx, "/roles.RolesService/GetRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/roles.RolesService/UpdateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) DeleteRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/roles.RolesService/DeleteRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RolesService service

type RolesServiceServer interface {
	CreateRole(context.Context, *Role) (*Response, error)
	GetAll(context.Context, *RequestQuery) (*ResponseList, error)
	GetRole(context.Context, *Role) (*ResponseRole, error)
	UpdateRole(context.Context, *Role) (*Response, error)
	DeleteRole(context.Context, *Role) (*Response, error)
}

func RegisterRolesServiceServer(s *grpc.Server, srv RolesServiceServer) {
	s.RegisterService(&_RolesService_serviceDesc, srv)
}

func _RolesService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roles.RolesService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).CreateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roles.RolesService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).GetAll(ctx, req.(*RequestQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roles.RolesService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).GetRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roles.RolesService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).UpdateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roles.RolesService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).DeleteRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

var _RolesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "roles.RolesService",
	HandlerType: (*RolesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _RolesService_CreateRole_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _RolesService_GetAll_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _RolesService_GetRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RolesService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RolesService_DeleteRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/roles.proto",
}

func init() { proto.RegisterFile("proto/roles.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x95, 0x9d, 0x47, 0x93, 0x9b, 0x2a, 0x6d, 0x27, 0x51, 0xe5, 0x9a, 0x57, 0x65, 0x36, 0x51,
	0x25, 0x12, 0x08, 0x48, 0x54, 0x5d, 0x11, 0xda, 0xa8, 0x42, 0x62, 0x43, 0x80, 0x75, 0xe4, 0xc6,
	0xb7, 0xd5, 0xd0, 0xc1, 0x63, 0xc6, 0xd7, 0x41, 0x16, 0x62, 0xc3, 0x2f, 0xf0, 0x0f, 0xfc, 0x02,
	0x0b, 0x3e, 0x83, 0x5f, 0x40, 0xe2, 0x0f, 0x58, 0xa3, 0x19, 0xdb, 0x49, 0x9a, 0x06, 0xa9, 0xa5,
	0xbb, 0x39, 0xf7, 0xce, 0x39, 0x3e, 0xf7, 0xcc, 0x78, 0x60, 0x2b, 0x52, 0x92, 0x64, 0x4f, 0x49,
	0x81, 0x71, 0xd7, 0xac, 0x59, 0xc5, 0x00, 0xf7, 0xf6, 0x99, 0x94, 0x67, 0x02, 0x7b, 0x7e, 0xc4,
	0x7b, 0x7e, 0x18, 0x4a, 0xf2, 0x89, 0xcb, 0x30, 0xdf, 0xe4, 0x7d, 0xb3, 0xa0, 0x3c, 0x92, 0x02,
	0x59, 0x13, 0x6c, 0x1e, 0x38, 0xd6, 0xae, 0xd5, 0xa9, 0x8f, 0x6c, 0x1e, 0xb0, 0x3b, 0x00, 0x21,
	0xd2, 0x47, 0xa9, 0xce, 0xc7, 0x3c, 0x70, 0x6c, 0x53, 0xaf, 0xe7, 0x95, 0x17, 0x01, 0x6b, 0x43,
	0x85, 0x38, 0x09, 0x74, 0x4a, 0xa6, 0x93, 0x01, 0x76, 0x0b, 0xea, 0xfa, 0xa3, 0x63, 0x4a, 0x23,
	0x74, 0xca, 0xa6, 0x53, 0xd3, 0x85, 0x37, 0x69, 0x84, 0x5a, 0x71, 0xa2, 0xd0, 0x27, 0x0c, 0xc6,
	0x3e, 0x39, 0x95, 0x4c, 0x31, 0xaf, 0x0c, 0x48, 0xb7, 0x93, 0x28, 0x28, 0xda, 0xd5, 0xac, 0x9d,
	0x57, 0x06, 0xe4, 0xfd, 0xb1, 0xa0, 0x36, 0xc2, 0x38, 0x92, 0x61, 0x8c, 0x6c, 0x1b, 0xaa, 0x0a,
	0xe3, 0x44, 0x50, 0x6e, 0x38, 0x47, 0xec, 0x21, 0x54, 0x50, 0x29, 0xa9, 0x1c, 0x7b, 0xb7, 0xd4,
	0x69, 0xf4, 0xdd, 0x6e, 0x96, 0x47, 0xc1, 0xeb, 0x0e, 0x75, 0x73, 0x18, 0x92, 0x4a, 0x47, 0xd9,
	0x46, 0xf6, 0x00, 0xca, 0x81, 0x4f, 0xbe, 0x53, 0x32, 0x84, 0x9d, 0x65, 0xc2, 0x91, 0x4f, 0x7e,
	0xb6, 0xdf, 0x6c, 0x73, 0xf7, 0x01, 0xe6, 0x1a, 0x6c, 0x13, 0x4a, 0xe7, 0x98, 0xe6, 0x1e, 0xf4,
	0x52, 0xc7, 0x32, 0xf5, 0x45, 0x82, 0x79, 0x60, 0x19, 0x38, 0xb0, 0xf7, 0x2d, 0xf7, 0x29, 0xd4,
	0x67, 0x62, 0xd7, 0x21, 0x7a, 0xdf, 0x2d, 0x58, 0x2f, 0xfc, 0x98, 0x93, 0xfa, 0xd7, 0xf0, 0x4f,
	0x2e, 0x0e, 0x7f, 0x77, 0x69, 0x16, 0xcd, 0x5d, 0x11, 0xc0, 0xbd, 0x59, 0x00, 0x56, 0xa7, 0xd1,
	0x6f, 0x14, 0x24, 0x29, 0xf0, 0xa6, 0x23, 0x7b, 0xef, 0xb4, 0xf1, 0x0f, 0x09, 0xc6, 0xf4, 0x2a,
	0x41, 0x95, 0x6a, 0xe3, 0xf2, 0xf4, 0x34, 0xc6, 0x99, 0xf1, 0x0c, 0x69, 0x05, 0xc1, 0xdf, 0x73,
	0x2a, 0x14, 0x0c, 0x60, 0x0e, 0xac, 0x49, 0x15, 0xa0, 0x3a, 0x49, 0xf3, 0x3b, 0x56, 0x40, 0xc6,
	0xa0, 0x1c, 0x4b, 0x45, 0xf9, 0x05, 0x33, 0x6b, 0xef, 0xc7, 0x42, 0x4a, 0x2f, 0x79, 0x4c, 0xff,
	0x9b, 0x92, 0xe6, 0xae, 0x48, 0xe9, 0xfe, 0x85, 0x94, 0x36, 0x16, 0x52, 0xd2, 0x84, 0x1b, 0x27,
	0x25, 0xa1, 0x56, 0x68, 0x5d, 0x33, 0xa5, 0x36, 0x54, 0x26, 0x32, 0x09, 0xa9, 0xf8, 0x0f, 0x0d,
	0xd0, 0x87, 0x2a, 0x78, 0xac, 0x13, 0x2a, 0x5d, 0x3a, 0x54, 0xdd, 0xe8, 0xff, 0xb6, 0x61, 0x5d,
	0xc3, 0xf8, 0x35, 0xaa, 0x29, 0x9f, 0x20, 0x7b, 0x06, 0x70, 0x68, 0x7e, 0x45, 0x73, 0xc5, 0x16,
	0x19, 0xee, 0xc6, 0x52, 0x44, 0x5e, 0xfb, 0xcb, 0xcf, 0x5f, 0x5f, 0xed, 0xa6, 0x57, 0xef, 0x4d,
	0x1f, 0x65, 0x2f, 0xce, 0x81, 0xb5, 0xc7, 0x86, 0x50, 0x3d, 0x46, 0x1a, 0x08, 0xc1, 0x5a, 0x33,
	0xc2, 0xfc, 0xf0, 0xdd, 0xd6, 0x8a, 0xa0, 0xbd, 0x2d, 0xa3, 0xd4, 0x60, 0x73, 0x25, 0x76, 0x08,
	0x6b, 0xc7, 0x48, 0x97, 0x5d, 0xb4, 0x56, 0x5c, 0x67, 0x6f, 0xdb, 0xf0, 0x37, 0x59, 0x73, 0xc6,
	0xef, 0x7d, 0xe2, 0xc1, 0x67, 0x36, 0x04, 0x78, 0x6b, 0x5e, 0x8e, 0x2b, 0x4c, 0xb3, 0x63, 0x34,
	0x5a, 0xfd, 0x25, 0x0d, 0x3d, 0xd2, 0x73, 0x80, 0x23, 0x14, 0x78, 0x25, 0x99, 0xdc, 0xca, 0xde,
	0x92, 0xcc, 0x49, 0xd5, 0xbc, 0xb3, 0x8f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x02, 0xc7,
	0x6d, 0xa1, 0x05, 0x00, 0x00,
}
