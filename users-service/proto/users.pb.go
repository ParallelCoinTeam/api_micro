// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/users.proto

/*
Package users is a generated protocol buffer package.

It is generated from these files:
	proto/users.proto

It has these top-level messages:
	User
	Response
	ResponseUser
	RequestQuery
	ResponseList
	UserList
*/
package users

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	NetworkId string `protobuf:"bytes,2,opt,name=network_id,json=networkId" json:"network_id,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Email     string `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	Password  string `protobuf:"bytes,6,opt,name=password" json:"password,omitempty"`
	IsAdmin   string `protobuf:"bytes,7,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
	CreatedAt string `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetIsAdmin() string {
	if m != nil {
		return m.IsAdmin
	}
	return ""
}

func (m *User) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *User) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type Response struct {
	Result string            `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Error  map[string]string `protobuf:"bytes,2,rep,name=error" json:"error,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Data   map[string]string `protobuf:"bytes,3,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *Response) GetError() map[string]string {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type ResponseUser struct {
	Result string            `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Error  map[string]string `protobuf:"bytes,2,rep,name=error" json:"error,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Data   *User             `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *ResponseUser) Reset()                    { *m = ResponseUser{} }
func (m *ResponseUser) String() string            { return proto.CompactTextString(m) }
func (*ResponseUser) ProtoMessage()               {}
func (*ResponseUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResponseUser) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *ResponseUser) GetError() map[string]string {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResponseUser) GetData() *User {
	if m != nil {
		return m.Data
	}
	return nil
}

type RequestQuery struct {
	Offset  string `protobuf:"bytes,1,opt,name=offset" json:"offset,omitempty"`
	Limit   string `protobuf:"bytes,2,opt,name=limit" json:"limit,omitempty"`
	Orderby string `protobuf:"bytes,3,opt,name=orderby" json:"orderby,omitempty"`
	Sort    string `protobuf:"bytes,4,opt,name=sort" json:"sort,omitempty"`
}

func (m *RequestQuery) Reset()                    { *m = RequestQuery{} }
func (m *RequestQuery) String() string            { return proto.CompactTextString(m) }
func (*RequestQuery) ProtoMessage()               {}
func (*RequestQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RequestQuery) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *RequestQuery) GetLimit() string {
	if m != nil {
		return m.Limit
	}
	return ""
}

func (m *RequestQuery) GetOrderby() string {
	if m != nil {
		return m.Orderby
	}
	return ""
}

func (m *RequestQuery) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

type ResponseList struct {
	Result string            `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Error  map[string]string `protobuf:"bytes,2,rep,name=error" json:"error,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Data   *UserList         `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *ResponseList) Reset()                    { *m = ResponseList{} }
func (m *ResponseList) String() string            { return proto.CompactTextString(m) }
func (*ResponseList) ProtoMessage()               {}
func (*ResponseList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ResponseList) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *ResponseList) GetError() map[string]string {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResponseList) GetData() *UserList {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserList struct {
	Offset string  `protobuf:"bytes,1,opt,name=offset" json:"offset,omitempty"`
	Limit  string  `protobuf:"bytes,2,opt,name=limit" json:"limit,omitempty"`
	Count  string  `protobuf:"bytes,3,opt,name=count" json:"count,omitempty"`
	List   []*User `protobuf:"bytes,4,rep,name=list" json:"list,omitempty"`
}

func (m *UserList) Reset()                    { *m = UserList{} }
func (m *UserList) String() string            { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()               {}
func (*UserList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserList) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *UserList) GetLimit() string {
	if m != nil {
		return m.Limit
	}
	return ""
}

func (m *UserList) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

func (m *UserList) GetList() []*User {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "users.User")
	proto.RegisterType((*Response)(nil), "users.Response")
	proto.RegisterType((*ResponseUser)(nil), "users.ResponseUser")
	proto.RegisterType((*RequestQuery)(nil), "users.RequestQuery")
	proto.RegisterType((*ResponseList)(nil), "users.ResponseList")
	proto.RegisterType((*UserList)(nil), "users.UserList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UsersService service

type UsersServiceClient interface {
	GetAll(ctx context.Context, in *RequestQuery, opts ...grpc.CallOption) (*ResponseList, error)
	GetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*ResponseUser, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
}

type usersServiceClient struct {
	cc *grpc.ClientConn
}

func NewUsersServiceClient(cc *grpc.ClientConn) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) GetAll(ctx context.Context, in *RequestQuery, opts ...grpc.CallOption) (*ResponseList, error) {
	out := new(ResponseList)
	err := grpc.Invoke(ctx, "/users.UsersService/GetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := grpc.Invoke(ctx, "/users.UsersService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/users.UsersService/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/users.UsersService/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UsersService service

type UsersServiceServer interface {
	GetAll(context.Context, *RequestQuery) (*ResponseList, error)
	GetUser(context.Context, *User) (*ResponseUser, error)
	UpdateUser(context.Context, *User) (*Response, error)
	DeleteUser(context.Context, *User) (*Response, error)
}

func RegisterUsersServiceServer(s *grpc.Server, srv UsersServiceServer) {
	s.RegisterService(&_UsersService_serviceDesc, srv)
}

func _UsersService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetAll(ctx, req.(*RequestQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _UsersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "users.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _UsersService_GetAll_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UsersService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UsersService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UsersService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/users.proto",
}

func init() { proto.RegisterFile("proto/users.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 603 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x95, 0x9d, 0x97, 0x7d, 0x53, 0xf5, 0x31, 0xad, 0x2a, 0xd7, 0xbc, 0x2a, 0xb3, 0xa9, 0x2a,
	0xd1, 0x40, 0x40, 0xa2, 0xea, 0x2e, 0xd0, 0xa8, 0x42, 0x42, 0x48, 0x14, 0x75, 0x1d, 0x4d, 0xeb,
	0x9b, 0x6a, 0xa8, 0xe3, 0x09, 0x33, 0xe3, 0x54, 0x11, 0x62, 0xc3, 0x2f, 0xf0, 0x0d, 0x7c, 0x03,
	0x0b, 0x3e, 0x83, 0x5f, 0xe0, 0x1b, 0x58, 0xb1, 0x40, 0xf3, 0x70, 0x9a, 0x26, 0x41, 0xa2, 0x74,
	0x37, 0xe7, 0x9e, 0x7b, 0x4e, 0xee, 0x9c, 0x3b, 0x31, 0xac, 0x0d, 0x05, 0x57, 0xbc, 0x55, 0x48,
	0x14, 0x72, 0xcf, 0x9c, 0x49, 0xcd, 0x80, 0xf8, 0xee, 0x39, 0xe7, 0xe7, 0x19, 0xb6, 0xe8, 0x90,
	0xb5, 0x68, 0x9e, 0x73, 0x45, 0x15, 0xe3, 0xb9, 0x6b, 0x4a, 0x7e, 0x7b, 0x50, 0x3d, 0x91, 0x28,
	0xc8, 0x32, 0xf8, 0x2c, 0x8d, 0xbc, 0x6d, 0x6f, 0x27, 0x3c, 0xf6, 0x59, 0x4a, 0xee, 0x01, 0xe4,
	0xa8, 0x2e, 0xb9, 0xb8, 0xe8, 0xb1, 0x34, 0xf2, 0x4d, 0x3d, 0x74, 0x95, 0x57, 0x86, 0xee, 0x33,
	0x21, 0x55, 0x2f, 0xa7, 0x03, 0x8c, 0x2a, 0x96, 0x36, 0x95, 0x37, 0x74, 0x80, 0xe4, 0x0e, 0x84,
	0x19, 0x2d, 0xd9, 0xaa, 0x61, 0x03, 0x5d, 0x30, 0xe4, 0x06, 0xd4, 0x70, 0x40, 0x59, 0x16, 0xd5,
	0x0c, 0x61, 0x01, 0x89, 0x21, 0x18, 0x52, 0x29, 0x2f, 0xb9, 0x48, 0xa3, 0xba, 0x55, 0x94, 0x98,
	0x6c, 0x41, 0xc0, 0x64, 0x8f, 0xa6, 0x03, 0x96, 0x47, 0x0d, 0xc3, 0x35, 0x98, 0xec, 0x68, 0xa8,
	0x07, 0x39, 0x13, 0x48, 0x15, 0xa6, 0x3d, 0xaa, 0xa2, 0xc0, 0x0e, 0xe2, 0x2a, 0x1d, 0xa5, 0xe9,
	0x62, 0x98, 0x96, 0x74, 0x68, 0x69, 0x57, 0xe9, 0xa8, 0xe4, 0x97, 0x07, 0xc1, 0x31, 0xca, 0x21,
	0xcf, 0x25, 0x92, 0x4d, 0xa8, 0x0b, 0x94, 0x45, 0xa6, 0x5c, 0x0c, 0x0e, 0x91, 0xc7, 0x50, 0x43,
	0x21, 0xb8, 0x88, 0xfc, 0xed, 0xca, 0x4e, 0xb3, 0x1d, 0xef, 0xd9, 0x94, 0x4b, 0xdd, 0x5e, 0x57,
	0x93, 0xdd, 0x5c, 0x89, 0xf1, 0xb1, 0x6d, 0x24, 0x8f, 0xa0, 0x9a, 0x52, 0x45, 0xa3, 0x8a, 0x11,
	0x6c, 0xcd, 0x0a, 0x0e, 0xa9, 0xa2, 0xb6, 0xdf, 0xb4, 0xc5, 0xfb, 0x00, 0x57, 0x1e, 0x64, 0x15,
	0x2a, 0x17, 0x38, 0x76, 0x33, 0xe8, 0xa3, 0x0e, 0x6c, 0x44, 0xb3, 0x02, 0xdd, 0x1a, 0x2c, 0x38,
	0xf0, 0xf7, 0xbd, 0xf8, 0x39, 0x84, 0x13, 0xb3, 0x9b, 0x08, 0x93, 0x6f, 0x1e, 0x2c, 0x95, 0xf3,
	0x98, 0xfd, 0xff, 0xed, 0xf2, 0xcf, 0xae, 0x5f, 0xfe, 0xfe, 0xcc, 0x5d, 0xb4, 0x76, 0x41, 0x00,
	0x0f, 0x26, 0x01, 0x78, 0x3b, 0xcd, 0x76, 0xd3, 0x89, 0x74, 0xf3, 0x6d, 0xaf, 0x9c, 0xbc, 0xd7,
	0x83, 0x7f, 0x28, 0x50, 0xaa, 0xb7, 0x05, 0x8a, 0xb1, 0x1e, 0x9c, 0xf7, 0xfb, 0x12, 0x27, 0x83,
	0x5b, 0xa4, 0x1d, 0x32, 0x36, 0x60, 0xaa, 0x74, 0x30, 0x80, 0x44, 0xd0, 0xe0, 0x22, 0x45, 0x71,
	0x3a, 0x76, 0x8f, 0xb6, 0x84, 0x84, 0x40, 0x55, 0x72, 0xa1, 0xdc, 0x6b, 0x35, 0xe7, 0xe4, 0xfb,
	0x54, 0x4a, 0xaf, 0x99, 0x54, 0xff, 0x9b, 0x92, 0xd6, 0x2e, 0x48, 0xe9, 0xe1, 0xb5, 0x94, 0x56,
	0xa6, 0x52, 0xd2, 0x82, 0x5b, 0x27, 0xc5, 0x21, 0x28, 0xbd, 0x6e, 0x98, 0xd2, 0x06, 0xd4, 0xce,
	0x78, 0x91, 0x2b, 0x97, 0x91, 0x05, 0x7a, 0xa9, 0x19, 0x93, 0x3a, 0xa1, 0xca, 0xdc, 0x52, 0x35,
	0xd1, 0xfe, 0xea, 0xc3, 0x92, 0x86, 0xf2, 0x1d, 0x8a, 0x11, 0x3b, 0x43, 0xd2, 0x85, 0xfa, 0x11,
	0xaa, 0x4e, 0x96, 0x91, 0xf5, 0x49, 0x22, 0x57, 0xab, 0x8b, 0xd7, 0x17, 0xc4, 0x94, 0xac, 0x7d,
	0xfe, 0xf1, 0xf3, 0x8b, 0xdf, 0x24, 0x61, 0x6b, 0xf4, 0xc4, 0x7e, 0xcf, 0xc8, 0x4b, 0x68, 0x1c,
	0xa1, 0x32, 0xcf, 0x74, 0xfa, 0x57, 0xe7, 0xf4, 0xba, 0x98, 0x6c, 0x1a, 0xfd, 0x2a, 0x59, 0x9e,
	0xe8, 0x5b, 0x1f, 0x59, 0xfa, 0x89, 0x74, 0x01, 0x4e, 0xcc, 0xff, 0x7e, 0xde, 0x67, 0x65, 0xc6,
	0x27, 0xd9, 0x32, 0x1e, 0xeb, 0xed, 0x19, 0x8f, 0x03, 0x6f, 0x97, 0xbc, 0x00, 0x38, 0xc4, 0x0c,
	0xff, 0xc9, 0xc6, 0x8d, 0xb2, 0x3b, 0x63, 0x73, 0x5a, 0x37, 0xdf, 0xde, 0xa7, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xc0, 0x17, 0xc1, 0xd0, 0xb5, 0x05, 0x00, 0x00,
}
